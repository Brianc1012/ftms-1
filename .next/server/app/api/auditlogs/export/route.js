(()=>{var e={};e.id=651,e.ids=[651],e.modules={3040:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>x,routeModule:()=>p,serverHooks:()=>g,workAsyncStorage:()=>d,workUnitAsyncStorage:()=>l});var a={};r.r(a),r.d(a,{POST:()=>c});var n=r(96559),s=r(48088),i=r(37719),o=r(32190),u=r(13365);async function c(e){try{let{action:t,table_affected:r,record_id:a,details:n}=await e.json();return await (0,u.A)({action:t,table_affected:r,record_id:a,performed_by:"ftms_user",details:n,request:e}),o.NextResponse.json({success:!0})}catch(e){return console.error("Failed to create audit log:",e),o.NextResponse.json({error:"Failed to create audit log"},{status:500})}}let p=new n.AppRouteRouteModule({definition:{kind:s.RouteKind.APP_ROUTE,page:"/api/auditlogs/export/route",pathname:"/api/auditlogs/export",filename:"route",bundlePath:"app/api/auditlogs/export/route"},resolvedPagePath:"C:\\Users\\Brian Caube\\OneDrive\\Documents\\capstone\\FTMS\\FTMS_JOEL\\ftms\\app\\api\\auditlogs\\export\\route.ts",nextConfigOutput:"",userland:a}),{workAsyncStorage:d,workUnitAsyncStorage:l,serverHooks:g}=p;function x(){return(0,i.patchFetch)({workAsyncStorage:d,workUnitAsyncStorage:l})}},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},13365:(e,t,r)=>{"use strict";r.d(t,{A:()=>o});var a=r(79464),n=r(78388),s=r(44999);async function i(e){try{if(e){let t=e.headers.get("x-forwarded-for");if(t)return t.split(",")[0].trim();let r=e.headers.get("x-real-ip");if(r)return r}try{let e=await (0,s.b3)(),t=e.get("x-forwarded-for");if(t)return t.split(",")[0].trim();let r=e.get("x-real-ip");if(r)return r}catch{}return"unknown"}catch(e){return console.error("Error getting client IP:",e),"unknown"}}async function o({action:e,table_affected:t,record_id:r,performed_by:s,details:o,ip_address:u,request:c}){try{let p=u||await i(c);await a.z.auditLog.create({data:{log_id:await (0,n.$)("LOG"),action:e,table_affected:t,record_id:r,performed_by:s,details:o,ip_address:p}})}catch(e){console.error("Failed to write audit log:",e)}}},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},78335:()=>{},78388:(e,t,r)=>{"use strict";r.d(t,{$:()=>s,B:()=>i});let a=new(r(96330)).PrismaClient,n={ASG:"AssignmentCache",LOG:"AuditLog",EXP:"ExpenseRecord",ITM:"Item",ITX:"ItemTransaction",RCP:"Receipt",RCI:"ReceiptItem",REV:"RevenueRecord"};async function s(e){if(!n[e])throw Error(`Invalid table prefix: ${e}`);return await a.$transaction(async t=>{let r=await t.sequence.upsert({where:{name:e},update:{value:{increment:1}},create:{name:e,value:1}});return`FTMS-${e}-${String(r.value).padStart(8,"0")}`})}async function i(){let e=new Date().toISOString().slice(0,10).replace(/-/g,"");return await a.$transaction(async t=>{let r=`XPT-${e}`,a=await t.sequence.upsert({where:{name:r},update:{value:{increment:1}},create:{name:r,value:1}});return`FTMS-XPT-${e}-${String(a.value).padStart(4,"0")}`})}},79464:(e,t,r)=>{"use strict";r.d(t,{z:()=>n});var a=r(96330);let n=globalThis.prisma??new a.PrismaClient},96330:e=>{"use strict";e.exports=require("@prisma/client")},96487:()=>{}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[447,580,999],()=>r(3040));module.exports=a})();